
#ifdef _WIN32
  using uint = unsigned int;
  using uchar = unsigned char;
  using ushort = unsigned short;
  using int64_t = long long;
  using uint64_t = unsigned long long;
#else
  #define uint unsigned int
  #define uchar unsigned char
  #define ushort unsigned short
  #define int64_t long long
  #define uint64_t unsigned long long
#endif
extern "C" __global__ void my_kernel_kernel0(float* __restrict__ placeholder, float* __restrict__ placeholder1, float* __restrict__ T_add, float* __restrict__ placeholder2, float* __restrict__ placeholder3) {
  float Conv2dOutput[32];
  __shared__ float PaddedInput_shared[256];
  __shared__ float placeholder_shared[32];
  Conv2dOutput[(0)] = 0.000000e+00f;
  Conv2dOutput[(8)] = 0.000000e+00f;
  Conv2dOutput[(16)] = 0.000000e+00f;
  Conv2dOutput[(24)] = 0.000000e+00f;
  Conv2dOutput[(2)] = 0.000000e+00f;
  Conv2dOutput[(10)] = 0.000000e+00f;
  Conv2dOutput[(18)] = 0.000000e+00f;
  Conv2dOutput[(26)] = 0.000000e+00f;
  Conv2dOutput[(4)] = 0.000000e+00f;
  Conv2dOutput[(12)] = 0.000000e+00f;
  Conv2dOutput[(20)] = 0.000000e+00f;
  Conv2dOutput[(28)] = 0.000000e+00f;
  Conv2dOutput[(6)] = 0.000000e+00f;
  Conv2dOutput[(14)] = 0.000000e+00f;
  Conv2dOutput[(22)] = 0.000000e+00f;
  Conv2dOutput[(30)] = 0.000000e+00f;
  Conv2dOutput[(1)] = 0.000000e+00f;
  Conv2dOutput[(9)] = 0.000000e+00f;
  Conv2dOutput[(17)] = 0.000000e+00f;
  Conv2dOutput[(25)] = 0.000000e+00f;
  Conv2dOutput[(3)] = 0.000000e+00f;
  Conv2dOutput[(11)] = 0.000000e+00f;
  Conv2dOutput[(19)] = 0.000000e+00f;
  Conv2dOutput[(27)] = 0.000000e+00f;
  Conv2dOutput[(5)] = 0.000000e+00f;
  Conv2dOutput[(13)] = 0.000000e+00f;
  Conv2dOutput[(21)] = 0.000000e+00f;
  Conv2dOutput[(29)] = 0.000000e+00f;
  Conv2dOutput[(7)] = 0.000000e+00f;
  Conv2dOutput[(15)] = 0.000000e+00f;
  Conv2dOutput[(23)] = 0.000000e+00f;
  Conv2dOutput[(31)] = 0.000000e+00f;
  for (int rc_outer_outer = 0; rc_outer_outer < 92; ++rc_outer_outer) {
    __syncthreads();
    int4 _1;
      int4 _2;
        int4 _3;
          int4 _4;
            int4 _5;
              int4 _6;
                int4 _7;
                  int4 _8 = make_int4((((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2));
                  int4 _9;
                    int4 _10 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                    int4 _11 = make_int4(2, 2, 2, 2);
                    _9.x = (_10.x%_11.x);
                    _9.y = (_10.y%_11.y);
                    _9.z = (_10.z%_11.z);
                    _9.w = (_10.w%_11.w);
                  int4 _12;
                    int4 _13 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                    int4 _14 = make_int4(2, 2, 2, 2);
                    _12.x = (_13.x/_14.x);
                    _12.y = (_13.y/_14.y);
                    _12.z = (_13.z/_14.z);
                    _12.w = (_13.w/_14.w);
                  int4 _15;
                  ushort4 _16;
                    ushort4 _17;
                      ushort4 _18;
                        int4 _19 = make_int4(2, 2, 2, 2);
                        int4 _20 = make_int4(0, 0, 0, 0);
                        _18.x = (_19.x>=_20.x);
                        _18.y = (_19.y>=_20.y);
                        _18.z = (_19.z>=_20.z);
                        _18.w = (_19.w>=_20.w);
                      ushort4 _21;
                        int4 _22 = make_int4(0, 0, 0, 0);
                        _21.x = (_9.x>=_22.x);
                        _21.y = (_9.y>=_22.y);
                        _21.z = (_9.z>=_22.z);
                        _21.w = (_9.w>=_22.w);
                      _17.x = (_18.x&&_21.x);
                      _17.y = (_18.y&&_21.y);
                      _17.z = (_18.z&&_21.z);
                      _17.w = (_18.w&&_21.w);
                    ushort4 _23;
                      ushort4 _24;
                        int4 _25 = make_int4(2, 2, 2, 2);
                        int4 _26 = make_int4(0, 0, 0, 0);
                        _24.x = (_25.x<_26.x);
                        _24.y = (_25.y<_26.y);
                        _24.z = (_25.z<_26.z);
                        _24.w = (_25.w<_26.w);
                      ushort4 _27;
                        int4 _28 = make_int4(0, 0, 0, 0);
                        _27.x = (_9.x<=_28.x);
                        _27.y = (_9.y<=_28.y);
                        _27.z = (_9.z<=_28.z);
                        _27.w = (_9.w<=_28.w);
                      _23.x = (_24.x&&_27.x);
                      _23.y = (_24.y&&_27.y);
                      _23.z = (_24.z&&_27.z);
                      _23.w = (_24.w&&_27.w);
                    _16.x = (_17.x||_23.x);
                    _16.y = (_17.y||_23.y);
                    _16.z = (_17.z||_23.z);
                    _16.w = (_17.w||_23.w);
                  int4 _29;
                    int4 _30 = make_int4(1, 1, 1, 1);
                    _29.x = (_12.x-_30.x);
                    _29.y = (_12.y-_30.y);
                    _29.z = (_12.z-_30.z);
                    _29.w = (_12.w-_30.w);
                  _15.x = (bool(_16.x)?_12.x:_29.x);
                  _15.y = (bool(_16.y)?_12.y:_29.y);
                  _15.z = (bool(_16.z)?_12.z:_29.z);
                  _15.w = (bool(_16.w)?_12.w:_29.w);
                  _7.x = (_8.x+_15.x);
                  _7.y = (_8.y+_15.y);
                  _7.z = (_8.z+_15.z);
                  _7.w = (_8.w+_15.w);
                int4 _31 = make_int4(8, 8, 8, 8);
                _6.x = (_7.x%_31.x);
                _6.y = (_7.y%_31.y);
                _6.z = (_7.z%_31.z);
                _6.w = (_7.w%_31.w);
              int4 _32;
                int4 _33;
                  int4 _34 = make_int4((((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2));
                  int4 _35;
                    int4 _36 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                    int4 _37 = make_int4(2, 2, 2, 2);
                    _35.x = (_36.x%_37.x);
                    _35.y = (_36.y%_37.y);
                    _35.z = (_36.z%_37.z);
                    _35.w = (_36.w%_37.w);
                  int4 _38;
                    int4 _39 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                    int4 _40 = make_int4(2, 2, 2, 2);
                    _38.x = (_39.x/_40.x);
                    _38.y = (_39.y/_40.y);
                    _38.z = (_39.z/_40.z);
                    _38.w = (_39.w/_40.w);
                  int4 _41;
                  ushort4 _42;
                    ushort4 _43;
                      ushort4 _44;
                        int4 _45 = make_int4(2, 2, 2, 2);
                        int4 _46 = make_int4(0, 0, 0, 0);
                        _44.x = (_45.x>=_46.x);
                        _44.y = (_45.y>=_46.y);
                        _44.z = (_45.z>=_46.z);
                        _44.w = (_45.w>=_46.w);
                      ushort4 _47;
                        int4 _48 = make_int4(0, 0, 0, 0);
                        _47.x = (_35.x>=_48.x);
                        _47.y = (_35.y>=_48.y);
                        _47.z = (_35.z>=_48.z);
                        _47.w = (_35.w>=_48.w);
                      _43.x = (_44.x&&_47.x);
                      _43.y = (_44.y&&_47.y);
                      _43.z = (_44.z&&_47.z);
                      _43.w = (_44.w&&_47.w);
                    ushort4 _49;
                      ushort4 _50;
                        int4 _51 = make_int4(2, 2, 2, 2);
                        int4 _52 = make_int4(0, 0, 0, 0);
                        _50.x = (_51.x<_52.x);
                        _50.y = (_51.y<_52.y);
                        _50.z = (_51.z<_52.z);
                        _50.w = (_51.w<_52.w);
                      ushort4 _53;
                        int4 _54 = make_int4(0, 0, 0, 0);
                        _53.x = (_35.x<=_54.x);
                        _53.y = (_35.y<=_54.y);
                        _53.z = (_35.z<=_54.z);
                        _53.w = (_35.w<=_54.w);
                      _49.x = (_50.x&&_53.x);
                      _49.y = (_50.y&&_53.y);
                      _49.z = (_50.z&&_53.z);
                      _49.w = (_50.w&&_53.w);
                    _42.x = (_43.x||_49.x);
                    _42.y = (_43.y||_49.y);
                    _42.z = (_43.z||_49.z);
                    _42.w = (_43.w||_49.w);
                  int4 _55;
                    int4 _56 = make_int4(1, 1, 1, 1);
                    _55.x = (_38.x-_56.x);
                    _55.y = (_38.y-_56.y);
                    _55.z = (_38.z-_56.z);
                    _55.w = (_38.w-_56.w);
                  _41.x = (bool(_42.x)?_38.x:_55.x);
                  _41.y = (bool(_42.y)?_38.y:_55.y);
                  _41.z = (bool(_42.z)?_38.z:_55.z);
                  _41.w = (bool(_42.w)?_38.w:_55.w);
                  _33.x = (_34.x+_41.x);
                  _33.y = (_34.y+_41.y);
                  _33.z = (_34.z+_41.z);
                  _33.w = (_34.w+_41.w);
                int4 _57 = make_int4(8, 8, 8, 8);
                _32.x = (_33.x/_57.x);
                _32.y = (_33.y/_57.y);
                _32.z = (_33.z/_57.z);
                _32.w = (_33.w/_57.w);
              int4 _58;
              ushort4 _59;
                ushort4 _60;
                  ushort4 _61;
                    int4 _62 = make_int4(8, 8, 8, 8);
                    int4 _63 = make_int4(0, 0, 0, 0);
                    _61.x = (_62.x>=_63.x);
                    _61.y = (_62.y>=_63.y);
                    _61.z = (_62.z>=_63.z);
                    _61.w = (_62.w>=_63.w);
                  ushort4 _64;
                    int4 _65 = make_int4(0, 0, 0, 0);
                    _64.x = (_6.x>=_65.x);
                    _64.y = (_6.y>=_65.y);
                    _64.z = (_6.z>=_65.z);
                    _64.w = (_6.w>=_65.w);
                  _60.x = (_61.x&&_64.x);
                  _60.y = (_61.y&&_64.y);
                  _60.z = (_61.z&&_64.z);
                  _60.w = (_61.w&&_64.w);
                ushort4 _66;
                  ushort4 _67;
                    int4 _68 = make_int4(8, 8, 8, 8);
                    int4 _69 = make_int4(0, 0, 0, 0);
                    _67.x = (_68.x<_69.x);
                    _67.y = (_68.y<_69.y);
                    _67.z = (_68.z<_69.z);
                    _67.w = (_68.w<_69.w);
                  ushort4 _70;
                    int4 _71 = make_int4(0, 0, 0, 0);
                    _70.x = (_6.x<=_71.x);
                    _70.y = (_6.y<=_71.y);
                    _70.z = (_6.z<=_71.z);
                    _70.w = (_6.w<=_71.w);
                  _66.x = (_67.x&&_70.x);
                  _66.y = (_67.y&&_70.y);
                  _66.z = (_67.z&&_70.z);
                  _66.w = (_67.w&&_70.w);
                _59.x = (_60.x||_66.x);
                _59.y = (_60.y||_66.y);
                _59.z = (_60.z||_66.z);
                _59.w = (_60.w||_66.w);
              int4 _72;
                int4 _73 = make_int4(1, 1, 1, 1);
                _72.x = (_32.x-_73.x);
                _72.y = (_32.y-_73.y);
                _72.z = (_32.z-_73.z);
                _72.w = (_32.w-_73.w);
              _58.x = (bool(_59.x)?_32.x:_72.x);
              _58.y = (bool(_59.y)?_32.y:_72.y);
              _58.z = (bool(_59.z)?_32.z:_72.z);
              _58.w = (bool(_59.w)?_32.w:_72.w);
              int4 _74 = make_int4(2944, 2944, 2944, 2944);
              _5.x = (_58.x*_74.x);
              _5.y = (_58.y*_74.y);
              _5.z = (_58.z*_74.z);
              _5.w = (_58.w*_74.w);
            int4 _75 = make_int4(((((int)blockIdx.x) / 5) * 1472), ((((int)blockIdx.x) / 5) * 1472), ((((int)blockIdx.x) / 5) * 1472), ((((int)blockIdx.x) / 5) * 1472));
            _4.x = (_5.x+_75.x);
            _4.y = (_5.y+_75.y);
            _4.z = (_5.z+_75.z);
            _4.w = (_5.w+_75.w);
          int4 _76;
            int4 _77;
              int4 _78;
                int4 _79 = make_int4((((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2), (((int)threadIdx.x) * 2));
                int4 _80;
                  int4 _81 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                  int4 _82 = make_int4(2, 2, 2, 2);
                  _80.x = (_81.x%_82.x);
                  _80.y = (_81.y%_82.y);
                  _80.z = (_81.z%_82.z);
                  _80.w = (_81.w%_82.w);
                int4 _83;
                  int4 _84 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
                  int4 _85 = make_int4(2, 2, 2, 2);
                  _83.x = (_84.x/_85.x);
                  _83.y = (_84.y/_85.y);
                  _83.z = (_84.z/_85.z);
                  _83.w = (_84.w/_85.w);
                int4 _86;
                ushort4 _87;
                  ushort4 _88;
                    ushort4 _89;
                      int4 _90 = make_int4(2, 2, 2, 2);
                      int4 _91 = make_int4(0, 0, 0, 0);
                      _89.x = (_90.x>=_91.x);
                      _89.y = (_90.y>=_91.y);
                      _89.z = (_90.z>=_91.z);
                      _89.w = (_90.w>=_91.w);
                    ushort4 _92;
                      int4 _93 = make_int4(0, 0, 0, 0);
                      _92.x = (_80.x>=_93.x);
                      _92.y = (_80.y>=_93.y);
                      _92.z = (_80.z>=_93.z);
                      _92.w = (_80.w>=_93.w);
                    _88.x = (_89.x&&_92.x);
                    _88.y = (_89.y&&_92.y);
                    _88.z = (_89.z&&_92.z);
                    _88.w = (_89.w&&_92.w);
                  ushort4 _94;
                    ushort4 _95;
                      int4 _96 = make_int4(2, 2, 2, 2);
                      int4 _97 = make_int4(0, 0, 0, 0);
                      _95.x = (_96.x<_97.x);
                      _95.y = (_96.y<_97.y);
                      _95.z = (_96.z<_97.z);
                      _95.w = (_96.w<_97.w);
                    ushort4 _98;
                      int4 _99 = make_int4(0, 0, 0, 0);
                      _98.x = (_80.x<=_99.x);
                      _98.y = (_80.y<=_99.y);
                      _98.z = (_80.z<=_99.z);
                      _98.w = (_80.w<=_99.w);
                    _94.x = (_95.x&&_98.x);
                    _94.y = (_95.y&&_98.y);
                    _94.z = (_95.z&&_98.z);
                    _94.w = (_95.w&&_98.w);
                  _87.x = (_88.x||_94.x);
                  _87.y = (_88.y||_94.y);
                  _87.z = (_88.z||_94.z);
                  _87.w = (_88.w||_94.w);
                int4 _100;
                  int4 _101 = make_int4(1, 1, 1, 1);
                  _100.x = (_83.x-_101.x);
                  _100.y = (_83.y-_101.y);
                  _100.z = (_83.z-_101.z);
                  _100.w = (_83.w-_101.w);
                _86.x = (bool(_87.x)?_83.x:_100.x);
                _86.y = (bool(_87.y)?_83.y:_100.y);
                _86.z = (bool(_87.z)?_83.z:_100.z);
                _86.w = (bool(_87.w)?_83.w:_100.w);
                _78.x = (_79.x+_86.x);
                _78.y = (_79.y+_86.y);
                _78.z = (_79.z+_86.z);
                _78.w = (_79.w+_86.w);
              int4 _102 = make_int4(8, 8, 8, 8);
              _77.x = (_78.x%_102.x);
              _77.y = (_78.y%_102.y);
              _77.z = (_78.z%_102.z);
              _77.w = (_78.w%_102.w);
            int4 _103;
            ushort4 _104;
              ushort4 _105;
                ushort4 _106;
                  int4 _107 = make_int4(8, 8, 8, 8);
                  int4 _108 = make_int4(0, 0, 0, 0);
                  _106.x = (_107.x>=_108.x);
                  _106.y = (_107.y>=_108.y);
                  _106.z = (_107.z>=_108.z);
                  _106.w = (_107.w>=_108.w);
                ushort4 _109;
                  int4 _110 = make_int4(0, 0, 0, 0);
                  _109.x = (_77.x>=_110.x);
                  _109.y = (_77.y>=_110.y);
                  _109.z = (_77.z>=_110.z);
                  _109.w = (_77.w>=_110.w);
                _105.x = (_106.x&&_109.x);
                _105.y = (_106.y&&_109.y);
                _105.z = (_106.z&&_109.z);
                _105.w = (_106.w&&_109.w);
              ushort4 _111;
                ushort4 _112;
                  int4 _113 = make_int4(8, 8, 8, 8);
                  int4 _114 = make_int4(0, 0, 0, 0);
                  _112.x = (_113.x<_114.x);
                  _112.y = (_113.y<_114.y);
                  _112.z = (_113.z<_114.z);
                  _112.w = (_113.w<_114.w);
                ushort4 _115;
                  int4 _116 = make_int4(0, 0, 0, 0);
                  _115.x = (_77.x<=_116.x);
                  _115.y = (_77.y<=_116.y);
                  _115.z = (_77.z<=_116.z);
                  _115.w = (_77.w<=_116.w);
                _111.x = (_112.x&&_115.x);
                _111.y = (_112.y&&_115.y);
                _111.z = (_112.z&&_115.z);
                _111.w = (_112.w&&_115.w);
              _104.x = (_105.x||_111.x);
              _104.y = (_105.y||_111.y);
              _104.z = (_105.z||_111.z);
              _104.w = (_105.w||_111.w);
            int4 _117;
              int4 _118 = make_int4(8, 8, 8, 8);
              _117.x = (_77.x+_118.x);
              _117.y = (_77.y+_118.y);
              _117.z = (_77.z+_118.z);
              _117.w = (_77.w+_118.w);
            _103.x = (bool(_104.x)?_77.x:_117.x);
            _103.y = (bool(_104.y)?_77.y:_117.y);
            _103.z = (bool(_104.z)?_77.z:_117.z);
            _103.w = (bool(_104.w)?_77.w:_117.w);
            int4 _119 = make_int4(184, 184, 184, 184);
            _76.x = (_103.x*_119.x);
            _76.y = (_103.y*_119.y);
            _76.z = (_103.z*_119.z);
            _76.w = (_103.w*_119.w);
          _3.x = (_4.x+_76.x);
          _3.y = (_4.y+_76.y);
          _3.z = (_4.z+_76.z);
          _3.w = (_4.w+_76.w);
        int4 _120 = make_int4((rc_outer_outer * 2), (rc_outer_outer * 2), (rc_outer_outer * 2), (rc_outer_outer * 2));
        _2.x = (_3.x+_120.x);
        _2.y = (_3.y+_120.y);
        _2.z = (_3.z+_120.z);
        _2.w = (_3.w+_120.w);
      int4 _121;
        int4 _122 = (make_int4)((0)+(1*0), (0)+(1*1), (0)+(1*2), (0)+(1*3));
        int4 _123 = make_int4(2, 2, 2, 2);
        _121.x = (_122.x%_123.x);
        _121.y = (_122.y%_123.y);
        _121.z = (_122.z%_123.z);
        _121.w = (_122.w%_123.w);
      int4 _124;
      ushort4 _125;
        ushort4 _126;
          ushort4 _127;
            int4 _128 = make_int4(2, 2, 2, 2);
            int4 _129 = make_int4(0, 0, 0, 0);
            _127.x = (_128.x>=_129.x);
            _127.y = (_128.y>=_129.y);
            _127.z = (_128.z>=_129.z);
            _127.w = (_128.w>=_129.w);
          ushort4 _130;
            int4 _131 = make_int4(0, 0, 0, 0);
            _130.x = (_121.x>=_131.x);
            _130.y = (_121.y>=_131.y);
            _130.z = (_121.z>=_131.z);
            _130.w = (_121.w>=_131.w);
          _126.x = (_127.x&&_130.x);
          _126.y = (_127.y&&_130.y);
          _126.z = (_127.z&&_130.z);
          _126.w = (_127.w&&_130.w);
        ushort4 _132;
          ushort4 _133;
            int4 _134 = make_int4(2, 2, 2, 2);
            int4 _135 = make_int4(0, 0, 0, 0);
            _133.x = (_134.x<_135.x);
            _133.y = (_134.y<_135.y);
            _133.z = (_134.z<_135.z);
            _133.w = (_134.w<_135.w);
          ushort4 _136;
            int4 _137 = make_int4(0, 0, 0, 0);
            _136.x = (_121.x<=_137.x);
            _136.y = (_121.y<=_137.y);
            _136.z = (_121.z<=_137.z);
            _136.w = (_121.w<=_137.w);
          _132.x = (_133.x&&_136.x);
          _132.y = (_133.y&&_136.y);
          _132.z = (_133.z&&_136.z);
          _132.w = (_133.w&&_136.w);
        _125.x = (_126.x||_132.x);
        _125.y = (_126.y||_132.y);
        _125.z = (_126.z||_132.z);
        _125.w = (_126.w||_132.w);
      int4 _138;
        int4 _139 = make_int4(2, 2, 2, 2);
        _138.x = (_121.x+_139.x);
        _138.y = (_121.y+_139.y);
        _138.z = (_121.z+_139.z);
        _138.w = (_121.w+_139.w);
      _124.x = (bool(_125.x)?_121.x:_138.x);
      _124.y = (bool(_125.y)?_121.y:_138.y);
      _124.z = (bool(_125.z)?_121.z:_138.z);
      _124.w = (bool(_125.w)?_121.w:_138.w);
      _1.x = (_2.x+_124.x);
      _1.y = (_2.y+_124.y);
      _1.z = (_2.z+_124.z);
      _1.w = (_2.w+_124.w);
    ((float4*)(PaddedInput_shared + ((((int)threadIdx.x) * 4))))[0] = make_float4(placeholder[_1.x],placeholder[_1.y],placeholder[_1.z],placeholder[_1.w]);
    if (((int)threadIdx.x) < 32) {
      placeholder_shared[(((int)threadIdx.x))] = placeholder1[(((((rc_outer_outer * 160) + ((((int)threadIdx.x) >> 4) * 80)) + ((((int)blockIdx.x) % 5) * 16)) + (((int)threadIdx.x) & 15)))];
    }
    __syncthreads();
    Conv2dOutput[(0)] = (Conv2dOutput[(0)] + (PaddedInput_shared[(((((int)threadIdx.x) >> 2) * 8))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(8)] = (Conv2dOutput[(8)] + (PaddedInput_shared[(((((int)threadIdx.x) >> 2) * 8))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(16)] = (Conv2dOutput[(16)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 128))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(24)] = (Conv2dOutput[(24)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 128))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(2)] = (Conv2dOutput[(2)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 2))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(10)] = (Conv2dOutput[(10)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 2))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(18)] = (Conv2dOutput[(18)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 130))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(26)] = (Conv2dOutput[(26)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 130))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(4)] = (Conv2dOutput[(4)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 4))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(12)] = (Conv2dOutput[(12)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 4))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(20)] = (Conv2dOutput[(20)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 132))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(28)] = (Conv2dOutput[(28)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 132))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(6)] = (Conv2dOutput[(6)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 6))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(14)] = (Conv2dOutput[(14)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 6))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(22)] = (Conv2dOutput[(22)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 134))] * placeholder_shared[(((((int)threadIdx.x) & 3) * 2))]));
    Conv2dOutput[(30)] = (Conv2dOutput[(30)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 134))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 8))]));
    Conv2dOutput[(1)] = (Conv2dOutput[(1)] + (PaddedInput_shared[(((((int)threadIdx.x) >> 2) * 8))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(9)] = (Conv2dOutput[(9)] + (PaddedInput_shared[(((((int)threadIdx.x) >> 2) * 8))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(17)] = (Conv2dOutput[(17)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 128))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(25)] = (Conv2dOutput[(25)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 128))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(3)] = (Conv2dOutput[(3)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 2))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(11)] = (Conv2dOutput[(11)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 2))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(19)] = (Conv2dOutput[(19)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 130))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(27)] = (Conv2dOutput[(27)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 130))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(5)] = (Conv2dOutput[(5)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 4))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(13)] = (Conv2dOutput[(13)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 4))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(21)] = (Conv2dOutput[(21)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 132))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(29)] = (Conv2dOutput[(29)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 132))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(7)] = (Conv2dOutput[(7)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 6))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(15)] = (Conv2dOutput[(15)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 6))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(23)] = (Conv2dOutput[(23)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 134))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 1))]));
    Conv2dOutput[(31)] = (Conv2dOutput[(31)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 134))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 9))]));
    Conv2dOutput[(0)] = (Conv2dOutput[(0)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 1))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(8)] = (Conv2dOutput[(8)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 1))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(16)] = (Conv2dOutput[(16)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 129))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(24)] = (Conv2dOutput[(24)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 129))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(2)] = (Conv2dOutput[(2)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 3))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(10)] = (Conv2dOutput[(10)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 3))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(18)] = (Conv2dOutput[(18)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 131))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(26)] = (Conv2dOutput[(26)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 131))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(4)] = (Conv2dOutput[(4)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 5))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(12)] = (Conv2dOutput[(12)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 5))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(20)] = (Conv2dOutput[(20)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 133))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(28)] = (Conv2dOutput[(28)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 133))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(6)] = (Conv2dOutput[(6)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 7))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(14)] = (Conv2dOutput[(14)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 7))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(22)] = (Conv2dOutput[(22)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 135))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 16))]));
    Conv2dOutput[(30)] = (Conv2dOutput[(30)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 135))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 24))]));
    Conv2dOutput[(1)] = (Conv2dOutput[(1)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 1))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(9)] = (Conv2dOutput[(9)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 1))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(17)] = (Conv2dOutput[(17)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 129))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(25)] = (Conv2dOutput[(25)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 129))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(3)] = (Conv2dOutput[(3)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 3))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(11)] = (Conv2dOutput[(11)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 3))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(19)] = (Conv2dOutput[(19)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 131))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(27)] = (Conv2dOutput[(27)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 131))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(5)] = (Conv2dOutput[(5)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 5))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(13)] = (Conv2dOutput[(13)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 5))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(21)] = (Conv2dOutput[(21)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 133))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(29)] = (Conv2dOutput[(29)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 133))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(7)] = (Conv2dOutput[(7)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 7))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(15)] = (Conv2dOutput[(15)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 7))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
    Conv2dOutput[(23)] = (Conv2dOutput[(23)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 135))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 17))]));
    Conv2dOutput[(31)] = (Conv2dOutput[(31)] + (PaddedInput_shared[((((((int)threadIdx.x) >> 2) * 8) + 135))] * placeholder_shared[((((((int)threadIdx.x) & 3) * 2) + 25))]));
  }
  for (int ax2_inner = 0; ax2_inner < 4; ++ax2_inner) {
    for (int ax3_inner = 0; ax3_inner < 2; ++ax3_inner) {
      T_add[(((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner))] = ((Conv2dOutput[(((ax2_inner * 2) + ax3_inner))] + placeholder2[(((((((int)blockIdx.x) % 5) * 16) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner))]) + placeholder3[(((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner))]);
      T_add[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 8))] = ((Conv2dOutput[((((ax2_inner * 2) + ax3_inner) + 8))] + placeholder2[((((((((int)blockIdx.x) % 5) * 16) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 8))]) + placeholder3[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 8))]);
      T_add[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 10240))] = ((Conv2dOutput[((((ax2_inner * 2) + ax3_inner) + 16))] + placeholder2[(((((((int)blockIdx.x) % 5) * 16) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner))]) + placeholder3[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 10240))]);
      T_add[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 10248))] = ((Conv2dOutput[((((ax2_inner * 2) + ax3_inner) + 24))] + placeholder2[((((((((int)blockIdx.x) % 5) * 16) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 8))]) + placeholder3[((((((((((((int)threadIdx.x) >> 3) * 1280) + ((((int)blockIdx.x) / 5) * 640)) + (((((int)threadIdx.x) & 7) >> 2) * 320)) + (ax2_inner * 80)) + ((((int)blockIdx.x) % 5) * 16)) + ((((int)threadIdx.x) & 3) * 2)) + ax3_inner) + 10248))]);
    }
  }
}


